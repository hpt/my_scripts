#!/usr/bin/expect --
#exp_internal -f /tmp/log.out 0

# try to find out the recorder ...
if {[info exists env(VTERM_RECORDER)]} {
	source $env(VTERM_RECORDER)
} else {
	source recorder.tcl
}

if {$argc != 1} {
	puts "Usage: $argv0 machine_name"
	puts "Which vterm do you want to connect?"
	expect_user {
		-re "(.*)\n" {
			set argv [linsert $argv 0 $expect_out(1,string)]
		}
		timeout {
			puts "You are too slow. Try again."
			exit 1
		}
	}
}

if {! [info exists [lindex $argv 0]]} {
	puts "Record cannot be found: [lindex $argv 0]"
	exit 1
}

set login_prompt "login: $|username: $"
set passwd_prompt "padmin's Password: $|Password for hscroot: $|password: $|Password: $"
set shell_prompt "\\$ $|~> |system> $|# $"

set hostname 	[lindex $argv 0]
set cmd_line 	[eval lindex \$$hostname 0]
set user_name 	[eval lindex \$$hostname 1]
set passwd	[eval lindex \$$hostname 2]
set rm_cmd	[eval lindex \$$hostname 3]
set mk_cmd	[eval lindex \$$hostname 4]

set timeout 60

eval spawn $cmd_line

expect_after {
	timeout {
		puts "Timeout!"
	}
	eof {
		puts "Connection be closed!"
		exit 1
	}
}

if {0==[string first "ssh" $cmd_line]} { 
	# ssh
	while 1 {
		expect {
			"verification failed." {
				close
				wait
				set hmc_name [string range $cmd_line [string first "@" $cmd_line] end]
				exec flock /tmp/vterm_rsk.lock -c "perl -ni -e 'if(!/$hmc_name/){print;}' ~/.ssh/known_hosts"
				eval spawn $cmd_line
				continue
			}
			"onnection refuse" {
				puts "Connection refused by hmc"
				close
				wait
				exit 1
			}
			"(yes/no)?" {
				send "yes\r"
				exp_continue
			}
			"Password:" {
				send "$passwd\r"
				exp_continue
			}
			-re "\\$ $|~> $" {
				send "$rm_cmd\r"
				break
			}
		}
	}
} else {	
	# telnet
	expect {
		-re $login_prompt {
			send "$user_name\r"
			exp_continue
		}
		-re $passwd_prompt {
			send "$passwd\r"
			exp_continue
		}
		
		-re $shell_prompt {
			send "$rm_cmd\r"
		}
	}
}

expect {
	-re $shell_prompt {
		send "$mk_cmd\r"
	}
}

# embed interact func
proc embed_interact {str_wait command message_enter message_leave} {
	send_user "$message_enter\n"
	interact {
		"\001a" {
			send "\001"
		}
		"\001q" {
			send_user "$message_leave\n"
			return
		}
		"\001~." {
			close
			exit
		}
		-re "\001\[^aq~]+" {
			send_user "Please quit with Ctrl-a q and run this again...\n"
		}
		-o eof {
			inter_return
		}
		-nobuffer -re "$str_wait" {
			send "$command\r"
			return
		}
		timeout 600 {
			send " \177"
		}
	}
}

interact {
	"\001a" {	;# how to input 'ctrl-a', learn from screen
		send "\001"
	}
	"\001~." {
		close
		exit
	}
	"\001es" {	;# set emacs mode in bash
		send "set -o emacs\r"
	}
	"\001ios" {	;# query the IO ST status
		send "/LTE/tools/ltpr/gss.ltpr -f IO\r"
	}
	"\001bof" {	;# boot from o/f
		send "dev /packages/gui obe\r"
	}
	"\001sms" {	;# try to enter sms
		embed_interact "Memory.*Keyboard.*Network.*SCSI" "1" "Trun on waiting for dropping into sms" "Trun off waiting for dropping into sms"
	}
	"\001of" {	;# try to enter of
		embed_interact "Memory.*Keyboard.*Network.*SCSI" "8" "Trun on waiting for dropping into o/f" "Trun off waiting for dropping into o/f"
	}
	"\001reboot" {	
		puts "Try to reboot $hostname from the HMC ..."
		exec /LTE/tools/lp_reboot.sh $hostname &
	}
	"\001boot" {	
		puts "Try to active $hostname from the HMC ..."
		exec /LTE/tools/lp_commands.sh active $hostname &
	}
	"\001shutdown" {
		puts "Try to shutdown $hostname from the HMC ..."
		exec /LTE/tools/lp_commands.sh shutdown $hostname &
	}
	"\001sreset" {
		puts "Try to softreset $hostname from the HMC ..."
		exec /LTE/tools/lp_commands.sh softreset $hostname &
	}
	"\001st" {
		puts "Try to get state of $hostname from the HMC ..."
		exec /LTE/tools/lp_commands.sh state $hostname &
	}
	-o
	timeout 600 {
		send " \177"
	}
}
