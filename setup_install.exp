#!/usr/bin/expect --
# puts color
proc blue_p {msg} {
	# color
	# it would be '^[[34;01m' & '^[[0m' in the bash
	set BLUE "\[34;01m"
	set OFF "\[0m"

	puts "$BLUE$msg$OFF"
}

switch -- [lindex $argv 0] {
	"suse" {
		set install_srv "lslte"
	}
	"redhat" {
		set install_srv "rhlte"
	}
	default {
		blue_p "Usage: $argv0 <suse|redhat>"
		exit
	}
}

set timeout 30
log_user 0
exp_internal -f /tmp/setup_install.log 0

# global variables
set ftp_iso_path ""
set iso_md5_path ""
set iso_num 0
set serv_iso_dir ""
set serv_dist_dir ""

# try to get $?
set status_prompt "\n(\[^\r]+)\r\[^\r]+# \$"

# log in
proc login {} {
	expect {
		 "ssword:" {
			send "don2rry\r"
			exp_continue
		}
		-re "\\\$ \$|# \$|> \$"
	}
}

# launch the ftp program, and drop into interact
# we use the .netrc now ...
proc interact_ftp {cmd} {
	send "$cmd\r"
	expect {
		"@*> \$" {
			send "\r"
		}
	}
}

# display a yes or on question and ...
proc are_you_sure {question} {
	# 
	set old_mode [stty raw]

	blue_p "$question\[y/n]"
	expect_user {
		-re "\[Yy]|\[Nn]" {
			eval stty $old_mode
			if [string match -nocase "*y*" $expect_out(buffer)] {
				blue_p "\nContinue ..."
				return -code ok
			}
			blue_p "\nPlease try again ..."
			exit
		}
		timeout {
			blue_p "\nTimeout when waiting for your confirmation."
			blue_p "Please try again"
			exit
		}
	}
}

#
proc connect_to_ftp3 {} {
	global spawn_id

	set methods_list [list {lftp ftp3.linux.ibm.com} {interact_ftp ""} \
				{ssh root@rhlte} {login;interact_ftp "lftp ftp3.linux.ibm.com"} \
				{ssh lte@lslte} {login;send "su -\r";login;interact_ftp "ftp ftp3.linux.ibm.com"}]

	

	foreach {method code} $methods_list {
		eval spawn $method
		expect_after {
			timeout {
				blue_p "timeout when try to connect_to_ftp3."
				if {[info exists expect_out(buffer)]} {
					blue_p "Context: $expect_out(buffer)"
				}
				blue_p "Will continue ..."
				close
				wait
				return -code continue
			}
			eof {
				blue_p "Connection closed when connect_to_ftp3."
				if {[info exists expect_out(buffer)]} {
					blue_p "Context: $expect_out(buffer)"
				}
				blue_p "Will continue ..."
				return -code continue
			}
		}
		eval $code
		return -code ok
	}

	return -code error
}

	
# get the new ISO's info
proc get_iso_info {} {
	global ftp_iso_path iso_num iso_md5_path

	if {[catch {connect_to_ftp3} result]} {
		blue_p "Connect to ftp3 failed: $result."
		exit
	}

	blue_p "You will enter interactly mode. Please search new ISO's info, "
	blue_p "and set some variables when drop out."
	send "\r"

	interact
	set timeout -1
	blue_p "Please give me the ISO's number: "
	expect_user -re "(.*)\n" {set iso_num $expect_out(1,string)}
	blue_p "Please give me the ISO's path on the ftp server: "
	expect_user -re "(.*)\n" {set ftp_iso_path $expect_out(1,string)}
	blue_p "Please gvie me the ISO's md5sum file's path on the ftp server: "
	expect_user -re "(.*)\n" {set iso_md5_path $expect_out(1,string)}

	are_you_sure "Are you sure?"
}

# login the server and setup dirs
proc setup_serv_dirs {} {
	global spawn_id install_srv serv_iso_dir serv_dist_dir
	spawn ssh lte@$install_srv
	expect_after {
		timeout {
			blue_p "Timeout in setup_serv_dirs."
			if {[info exists expect_out(buffer)]} {
				blue_p "Context: $expect_out(buffer)"
			}
			close
			wait
			exit
		}
		eof {
			blue_p "Connection closed in setup_serv_dirs."
			if {[info exists expect_out(buffer)]} {
				blue_p "Context: $expect_out(buffer)"
			}
			exit
		}
	}
	login
	send "su -\r"
	login

	blue_p "You will enter interactly mode. Please setup the dirs, "
	blue_p "and set some variables when drop out."
	send "\r"

	interact
	set timeout -1
	blue_p "Please give me the path of ISOs on the installation server: "
	expect_user -re "(.*)\n" {set serv_iso_dir $expect_out(1,string)}
	blue_p "Please give me the path of dist on the installation server: "
	expect_user -re "(.*)\n" {set serv_dist_dir $expect_out(1,string)}
	
	are_you_sure "Are you sure?"
}

proc download_iso {} {
	global install_srv serv_iso_dir ftp_iso_path iso_num variable_id_list status_prompt
	
	blue_p "Trying to download the ISOs ..."

	for {set i 1} {$i <= $iso_num} {incr i} {
		spawn ssh lte@$install_srv
		set id$i $spawn_id
		lappend constant_id_list $spawn_id
		set no($spawn_id) $i
	}

	set variable_id_list $constant_id_list

	# the "# \$" must be matched after the '-re "$status_prompt"'
	expect_after {
		timeout {
			# timeout doesn't tie with any process
			blue_p "timeout in download_iso."
			exit
		}
		-i variable_id_list 
		eof {
			eval set n \$no($expect_out(spawn_id))
			blue_p "Connection closed when try to download the No.$n ISO."
			if {[info exists expect_out(buffer)]} {
				blue_p "Context: $expect_out(buffer)."
			}

			exit
		}
		"# \$" {
			# whether should continue
			set i [lsearch $variable_id_list $expect_out(spawn_id)]
			set variable_id_list [lreplace $variable_id_list $i $i]
			if [llength $variable_id_list] exp_continue
		}
	}

	# login & su
	set variable_id_list $constant_id_list
	expect {
		-i variable_id_list
		"assword: " {
			send -i $expect_out(spawn_id) "don2rry\r"
			exp_continue
		}
		-re "\\\$ \$|> \$" {
			send -i $expect_out(spawn_id) "su -\r"
			exp_continue
		}
	}

	# 
	send -i $constant_id_list "stty -echo\r"
	set variable_id_list $constant_id_list
	expect 

	# download
	set timeout -1
	for {set i 1} {$i <= $iso_num} {incr i} {
		eval set id \$id$i
		eval set path $ftp_iso_path
		send -i $id "cd $serv_iso_dir && wget -q ftp://ftp3.linux.ibm.com/$path;echo \$?\r"
	}

	# monitor
	set variable_id_list $constant_id_list
	expect {
		-i variable_id_list 
		-re "$status_prompt" {

			eval set n \$no($expect_out(spawn_id))

			if {$expect_out(1,string) != "0"} {
				blue_p "Failed to download the the No.$n ISO."
				blue_p "Context: $expect_out(buffer)."
				set dl_f "failed"
			} else {
				blue_p "Download the No.$n ISO succeed!"
			}
			close -i $expect_out(spawn_id)
			wait -i $expect_out(spawn_id)

			# whether should continue
			set i [lsearch $variable_id_list $expect_out(spawn_id)]
			set variable_id_list [lreplace $variable_id_list $i $i]
			if [llength $variable_id_list] exp_continue
		}
	}

	if [info exists dl_f] {
		exit
	}
	blue_p "ISOs downloading succeeded!"
	return -code ok
}

proc check_iso_md5sum {} {
	global serv_iso_dir iso_md5_path iso_num status_prompt

	blue_p "Try to checksum the ISOs ..."

	set timeout -1
	send "cd $serv_iso_dir && wget -q ftp://ftp3.linux.ibm.com/$iso_md5_path; echo \$?\r"
	expect {
		-re "$status_prompt" {
			if {$expect_out(1,string) != 0} {
				blue_p "Failed to download the md5sum file."
				blue_p "Context: $expect_out(buffer)"
				exit
			}
		}
	}

	set md5sum [lindex [split $iso_md5_path "/"] end] 

	send "stty -echo\r"
	expect "# \$"

	set old_log_user [log_user -info]
	log_user 1
	send "md5sum -c $md5sum 2>&1 |{ while read line;do buf=\"\$line\\n\$buf\";echo \$line;done;echo -n -e \"\$buf\"|grep OK|wc -l; }\r"
	expect {
		-re "$status_prompt" {
			if {$expect_out(1,string) != $iso_num} {
				blue_p "\nmd5sum checking failed!"
				are_you_sure "Continue?"
			} else {
				blue_p "\nmd5sum checking succeed!"
			}
		}
	}
	log_user $old_log_user
}

#
proc copy_isos {} {
	global iso_num serv_iso_dir serv_dist_dir ftp_iso_path status_prompt

	send "cd $serv_iso_dir && for i in \$(seq 1 $iso_num);do mkdir \$i;done;echo $?\r"
	expect -re "$status_prompt" {
		if { $expect_out(1,string) != 0 } {
			blue_p "Failed to mkdir mountpoint."
			blue_p "Context: $expect_out(buffer)"
			exit
		}
	}

	set iso_pattern [lindex [split $ftp_iso_path "/"] end]
	send "for i in \$(seq 1 $iso_num);do mount -o loop $iso_pattern \$i;done;echo \$?\r"
	expect -re $status_prompt {
		if {$expect_out(1,string) != 0} {
			blue_p "Failed to mount the ISOs."
			blue_p "Context: $expect_out(buffer)"
			exit
		}
	}

	set timeout -1
	switch -- [lindex $argv 0] {
		"redhat" {
			send "for i in \$(seq 1 $iso_num);do \\cp -a \$i/* $serv_dist_dir;done;echo \$?\r"
		}
		"suse" {
			send "for i in \$(seq 1 $iso_num);do mkdir $serv_dist_dir/CD\$i;\\cp -a \$i/* $serv_dist_dir/CD\$i;done;echo \$?\r"
		}
		default {
			blue_p "Shouldn't happen!"
			blue_p "exit..."
			exit
		}

	}

	expect -re "$status_prompt" {
		if {$expect_out(1,string) != 0} {
			blue_p "Failed to copy the ISOs."
			blue_p "Context: $expect_out(buffer)"
			exit
		}
	}
}

get_iso_info
setup_serv_dirs
download_iso

# login & su
spawn ssh lte@$install_srv
expect_after {
	timeout {
		blue_p "timeout when trying to login the $install_srv."
		exit
	}
	eof {
		blue_p "Connection closed when trying to login $install_srv."
		exit
	}
}
login
send "su -\r"
login

#set serv_iso_dir "/images/ppc/redhat/autodownload/"
#set iso_md5_path "/redhat/beta_cds/RHEL39-Beta/ppc/SRPMS/MD5SUMS"
#set iso_num 3

check_iso_md5sum

copy_isos

#setup_install_serv
