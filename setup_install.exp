#!/usr/bin/expect --
switch -- [lindex $argv 0] {
	"suse" {
		set install_srv "lslte"
	}
	"redhat" {
		set install_srv "rhlte"
	}
	default {
		puts "Usage: $argv0 <suse|redhat>"
		exit
	}
}

#set timeout 5
log_user 0

# global variables
set iso_path ""
set iso_num 0

# log in
proc login {} {
	expect {
		 "ssword:" {
			send "don2rry\r"
			exp_continue
		}
		-re "# \$|> \$"
	}
}

# launch the ftp program, and drop into interact
# we use the .netrc now ...
proc interact_ftp {cmd} {
	send "$cmd\r"
	expect {
		"> \$" {
			puts "Notes: please try to find the new ISO's info,"
			puts "and try to setup some varibles:"
			puts "iso_path: set iso_path {/redhat/beta_cds/rhel5/rhel5-ftp-CD\$i.iso}"
			puts "iso_num: set iso_num 6"
		}
	}
	send "\r"
}

#
proc connect_to_ftp3 {} {
	global spawn_id

	set methods_list [list {lftp ftp3.linux.ibm.com} {interact_ftp ""} \
				{ssh root@rhlte} {login;interact_ftp "lftp ftp3.linux.ibm.com"} \
				{ssh lte@lslte} {login;send "su -\r";login;interact_ftp "ftp ftp3.linux.ibm.com"}]

	

	foreach {method code} $methods_list {
		eval spawn $method
		expect_after {
			timeout {
				puts "timeout when try to connect_to_ftp3."
				if {[info exists expect_out(buffer)]} {
					puts "Context: $expect_out(buffer)"
				}
				close
				wait
				return -code continue
			}
			eof {
				puts "Connection closed when connect_to_ftp3."
				if {[info exists expect_out(buffer)]} {
					puts "Context: $expect_out(buffer)"
				}
				return -code continue
			}
		}
		eval $code
		return -code ok
	}

	return -code error
}

	
# get the new ISO's info
proc get_iso_info {} {
	global iso_path iso_num

	if {[catch {connect_to_ftp3} result]} {
		puts "Connect to ftp3 failed: $result."
		exit
	}

	interact

	interpreter
}

get_iso_info

puts "$iso_path"
puts "$iso_num"
