#!/usr/bin/expect --
#***********************************************************************#
# a auto login & run command on remote machines script			#
#***********************************************************************#
# default timeout ...
set timeout 30

# default password is ...
set passwd "don2rry"

# default spawn options ...
set spawn_options {}

# default program to run ...
set prog "ssh"

# 
proc help {} {
	global argv0
	puts "Usage: $argv0 \[-p passwd] \[-s\] \[user@]hostname \[commands]"
	puts "	or:"
	puts "	$argv0 -r scp <scp filename convention>"
}

while {[llength $argv] > 0} {
	set flag [lindex $argv 0]
	if {0==[regexp "^-" $flag]} break
	set argv [lrange $argv 1 end]
	switch -- $flag \
		"-r" {
			set prog [lindex $argv 0]
			set argv [lrange $argv 1 end]
		} \
		"-p" {
			set passwd [lindex $argv 0]
			set argv [lrange $argv 1 end]
		} \
		"-s" {
			set spawn_options "-noecho"
		} \
		default {
			help
			exit 1
		}
}

if {[llength $argv] < 1} {
	help
	exit 1
}


if {[string equal "ssh" $prog]} {
	set machine [lindex $argv 0]
	set cmd [lindex $argv 1]
	
	if {! [string match "*?@?*" $machine]} {
		set machine "root@$machine"
	}
} else {
	set machine {}

	foreach cmd $argv {
		if { [regexp "@?(\[^@:]*):" $cmd all_match mname] } {
			set machine [concat $machine $mname]
		}
	}
}

while 1 {
	if {[string equal "ssh" $prog]} {
		eval spawn $spawn_options $prog \$machine \$cmd
	} else {
		eval spawn $spawn_options $prog $argv
	}

	set machine_need_pwd [llength $machine]

	expect {
		-re "assword: $" {
			send "$passwd\r"
			if {$machine_need_pwd == 2} {
				set machine_need_pwd [expr $machine_need_pwd - 1]
				exp_continue
			} else {
				break
			}
		}
		-exact "(yes/no)?" {
			send "yes\r"
			exp_continue
		}
		-exact "ailed." {
			if {[string equal "ssh" $prog]} {
			       set m [string range $machine [expr [string first @ $machine] + 1] end]
	         	       exec sh -c ". ~/.bashrc;rsk $m"
	         	       # cann't define HOST in this scope,otherwise
	         	       # after rsk will be none string.
	         	       close
	         	       wait
	         	       continue
	         	} else {	# for scp ...
				if {[llength $machine] != 2} {
					exec sh -c ". ~/.bashrc;rsk [lindex $machine 0]"
					close
					wait
					continue
				} else { # only wraning now ...
					puts "Seems key verifying failed on localhost machine for [lindex $machine 0]"
					puts "and/or"
					puts "failed on [lindex $machine 0] for [lindex $machine 1]."
					puts "Please check ..."
					exit 3
				}
			}
		}
		-exact "onnection refuse" {  # for the host refuse to connect
                        puts "Connection refused to $machine"
                        exit 0
                }
                eof {                   # for no password needed
                        puts "No password be needed...."
                        exit 0
                }
		timeout {
			puts "timeout to $machine"
			exit 0
		}
	}
}

if {! [info exists cmd] || [string length $cmd] > 0} {
	set timeout -1
	expect eof
} else {
	interact {
		"\001es" { send "set -o emacs\r"}
		"\001ios" { send "/LTE/tools/ltpr/gss.ltpr -f IO\r"}
		-o
		timeout 600 {
			send " \177"
		}
	}
}
